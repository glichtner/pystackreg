version: '{branch}-{build}'
image: Visual Studio 2019
stack: python 3.6
environment:
  matrix:
    - APPVEYOR_BUILD_WORKER_IMAGE: macos
      TOXENV: py36
    - APPVEYOR_BUILD_WORKER_IMAGE: macos-mojave
      TOXENV: py36
    - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu
      TOXENV: py36
    - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu1604
      TOXENV: py36
    - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu2004
      TOXENV: py36
    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
      PYTHON: "C:/Python27-x64"
      TOXENV: py27
    - PYTHON: "C:/Python35-x64"
      TOXENV: py35
    - PYTHON: "C:/Python36-x64"
      TOXENV: py36
    - PYTHON: "C:/Python37-x64"
      TOXENV: py37
    - PYTHON: "C:/Python38-x64"
      TOXENV: py38
    - PYTHON: "C:/Python39-x64"
      TOXENV: py39
    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
      PYTHON: "C:/Python27"
      TOXENV: py27
    - PYTHON: "C:/Python35"
      TOXENV: py35
    - PYTHON: "C:/Python36"
      TOXENV: py36
    - PYTHON: "C:/Python37"
      TOXENV: py37
    - PYTHON: "C:/Python38"
      TOXENV: py38
    - PYTHON: "C:/Python39"
      TOXENV: py39

install:
  - sh: |
      python -m pip install --upgrade pip
      python -m pip install --upgrade setuptools wheel virtualenv tox
      python -m virtualenv venv
      source venv/bin/activate
      python -m pip install --upgrade tox
  - cmd: |
      "%PYTHON%/python.exe" -m pip install --upgrade pip
      "%PYTHON%/python.exe" -m pip install --upgrade setuptools wheel
      "%PYTHON%/python.exe" -m virtualenv venv
      "venv\\Scripts\\activate.bat"
      python -m pip install --upgrade tox
build_script:
  - sh: |
      python setup.py build
      python setup.py sdist
  - cmd: |
      "%PYTHON%/python.exe" setup.py build
      "%PYTHON%/python.exe" setup.py bdist_wheel

test_script:
  - cmd: "venv\\Scripts\\tox"
  - sh: tox

artifacts:
  - path: "dist/*"

after_deploy:
  - cmd: |
      if($env:APPVEYOR_REPO_TAG -eq 'true') {
        Write-Output ("Deploying " + $env:APPVEYOR_REPO_TAG_NAME + " to PyPI...")
        &"${Env:PYTHON}/python.exe" -m pip install twine
        &"${Env:PYTHON}/python.exe" -m twine upload -u ${Env:PYPI_USER} -p ${Env:PYPI_PASS} --skip-existing dist/*.whl
      } else {
        Write-Output "No tag for deployment"
      }
  - ps: |
      if ($env:CI_WINDOWS -eq 'false') {
        if($env:APPVEYOR_REPO_TAG -eq 'true') {
          Write-Output ("Deploying " + $env:APPVEYOR_REPO_TAG_NAME + " to PyPI...")
          &python -m pip install twine
          &python -m twine upload -u ${Env:PYPI_USER} -p ${Env:PYPI_PASS} --skip-existing dist/*.tar.gz
        } else {
          Write-Output "No tag for deployment"
        }
      }

deploy:
  release: $(APPVEYOR_REPO_TAG_NAME)
  description: 'pystackreg $(APPVEYOR_REPO_TAG_NAME)'
  provider: GitHub
  auth_token: $(GITHUB_AUTH_TOKEN)
  artifact: /.*\.(tar\.gz|whl)/
  draft: false
  prerelease: false
  on:
    APPVEYOR_REPO_TAG: true        # deploy on tag push only
